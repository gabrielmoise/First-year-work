object IntSetTest
{
  def main (args : Array[String]) =
    {
      var list = IntSet(3,5,1)
      var list2 = IntSet(5,1,3)
      assert (list.sum == 9)
      assert (list2.sum == 9)
      assert (list.union(list) == list)
      assert (list.union(list2) == list)
      assert (list.intersect(list) == list)
      assert (list.intersect(list2) == list)
      assert (list.subsetOf(list))
      assert (list.subsetOf(list2))
      assert (! list.contains(2))
      assert (! list.contains(0))
      assert (list.contains(1))
      assert (list.contains(5))
      assert (list.size == 3)
      assert (list.any == 1)
      assert(list == list2)
      assert (list.toString == "{1, 3, 5}")
      list.add(1); list.add(2) ; list.add(7)
      assert (list.toString == "{1, 2, 3, 5, 7}")
      assert (! list.subsetOf(list2))
      assert (list.size == 5)
      assert (list.any == 1)
      assert (! list.contains(4))
      assert (list.contains(1))
      assert (list.contains(7))
      assert (list != list2)
      assert (! list.remove(4))
      assert (list != list2)
      assert (list.remove(7))
      assert (list.remove(2))
      assert (! list.contains(7))
      assert (list == list2)
      assert (list.subsetOf(list2))
      assert (list.remove(1))
      assert (list.remove(3))
      assert (list.toString == "{5}")
      assert (list.subsetOf(list2))
      assert (list.remove(5))
      assert (! list.remove(4))
      assert (list.toString == "{}")
      assert (list.sum == 0)
      assert (list.size == 0)
      assert (list.subsetOf(list2))
      assert(list.union(list2) == list2)
      var list3 = IntSet(1,4,5)
      var list4 = IntSet(2,4,5,6)
      assert (list4.sum == 17)
      assert ((list3.union(list4)).toString == "{1, 2, 4, 5, 6}")
      assert ((list.union(list)).toString == "{}")
      assert ((list3.intersect(list4)).toString == "{4, 5}")
      assert ((list.intersect(list3)).toString == "{}")
      var list5 = IntSet()
      var list6 = IntSet(1,4,10)
      var list7 = IntSet(9,3,8)
      assert(list5.sum == 0)
      assert(list7.sum == 20)
      assert ((list5. map((x:Int) => x*5)).toString == "{}")
      assert ((list6. map ((x:Int) => 20-x)).toString == "{10, 16, 19}")
      assert ((list7. map ((x:Int) => 40-x*x)).toString == "{-41, -24, 31}")
      assert ((list5. filter ((x:Int) => x%2 == 0)).toString == "{}")
      assert ((list6. filter ((x:Int) => x%2 == 0)).toString == "{4, 10}")
      assert ((list7. filter ((x:Int) => x%3 == 0)).toString == "{3, 9}")
      assert ((list5. takeWhile ((x:Int) => x%2 == 0)).toString == "{}")
      assert ((list6. takeWhile ((x:Int) => x%2 == 0)).toString == "{}")
      assert (list6.remove(1))
      assert ((list6. takeWhile ((x:Int) => x%2 == 0)).toString == "{4, 10}")
      assert (list7.remove(8))
      list7.add(11)
      assert ((list7. takeWhile ((x:Int) => x%3 == 0)).toString == "{3, 9}")
      list7.add(5)
      assert ((list7. takeWhile ((x:Int) => x%3 == 0)).toString == "{3}")
      var set1 = IntSet(1,4,3,4)
      var set2 = IntSet(3,2,1)
      assert (set2.subsetOf(set1) == false)
    }
}
